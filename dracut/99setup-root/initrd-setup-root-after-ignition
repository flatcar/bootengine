#!/bin/bash
set -euo pipefail

function usrbin() {
  local cmd="$1"
  shift
  LD_LIBRARY_PATH=/sysusr/usr/lib64 /sysusr/usr/bin/"${cmd}" "$@"
}

function usrcurl() {
  usrbin curl -fsSL --retry-delay 1 --retry 60 --retry-connrefused --retry-max-time 60 --connect-timeout 20 "$@"
}

function download_and_verify() {
  # Downloads release artifact to /sysroot/$name and verifies $name.sig with gpg
  # Expects the env vars: FLATCAR_BOARD, VERSION
  local name="$1"
  local channel=""
  case $(echo "${VERSION}" | cut -d . -f 2) in
    0) channel="alpha" ;;
    1) channel="beta" ;;
    2) channel="stable" ;;
    3) channel="lts" ;;
    *) ;;
  esac
  local URLS=()
  if [ "${channel}" != "" ]; then
    URLS+=("https://${channel}.release.flatcar-linux.net/${FLATCAR_BOARD}/${VERSION}/${name}")
  fi
  URLS+=("https://bincache.flatcar-linux.net/images/${FLATCAR_BOARD/-usr}/${VERSION}/${name}")
  local COUNT=""
  local URL=""
  for URL in "${URLS[@]}"; do
    # Workaround: Once curl starts and fails to resolve a DNS name (due to a race or temporary failure),
    # it sticks to it for each retry, making the retry pointless. Therefore, we first have to
    # add a curl waiter that does the DNS retry and won't be stuck (nor waste 30*60 seconds).
    for COUNT in $(usrbin seq 30); do
      if usrbin curl -fsSL --head "${URL}" > /dev/null; then
        break
      fi
      sleep 1
    done
    # If the loop terminated without the break, rely on the command below to fail
    usrcurl -o "/sysroot/${name}" "${URL}" || { rm -f "/sysroot/${name}" ; continue ; }
    usrcurl -o "/sysroot/${name}.sig" "${URL}.sig" || { rm -f "/sysroot/${name}.sig" ; continue ; }
    break
  done
  if [ ! -e "/sysroot/${name}" ] || [ ! -e "/sysroot/${name}.sig" ]; then
    echo "Failed to download required sysext image ${name}" >&2
    exit 1 # Fail the boot
  fi
  local GPG_KEY=""
  local GPG_LONG_ID=""
  # Extract public key from flatcar-install
  GPG_KEY=$(tr '\n' '_'  < /sysroot/usr/bin/flatcar-install | grep -Po 'GPG_KEY="\K.*?(?=")' | tr '_' '\n')
  GPG_LONG_ID=$(grep -Po '^GPG_LONG_ID="\K.*?(?=")' /sysroot/usr/bin/flatcar-install)
  export GNUPGHOME=/run/_gpg
  mkdir -p "${GNUPGHOME}"
  usrbin chmod 700 "${GNUPGHOME}"
  usrbin gpg --batch --quiet --import <<< "${GPG_KEY}"
  if ! usrbin gpg --batch --trusted-key "${GPG_LONG_ID}" --verify "/sysroot/${name}.sig" "/sysroot/${name}"; then
    rm -f "/sysroot/${name}.sig" "/sysroot/${name}"
    rm -rf "${GNUPGHOME}"
    echo "Failed to verify required sysext image ${name}" >&2
    exit 1 # Fail the boot
  fi
  rm "/sysroot/${name}.sig"
  rm -rf "${GNUPGHOME}"
  true # Don't leak previous exit code as return code
}

# Manage sysext symlinks to select the active sysext image, and do OEM partition migrations
# (An alternative to symlinks is to implement support for ".v directories" in systemd-sysext
# that could contain multiple versions and the right one gets selected, here not the newest
# but that matching the OS version. However, we would still need the migration logic and
# would not be able to use the OEM partition as dynamically preferred storage.)
VERSION=$(source /sysroot/usr/lib/os-release ; echo "${VERSION}")
FLATCAR_BOARD=$(source /sysroot/usr/lib/os-release ; echo "${FLATCAR_BOARD}")

# Not all OEM partitions have an oem-release file but we require it now
OEMID=$({ grep -m 1 -o "^ID=.*" /sysroot/oem/oem-release || true ; } | cut -d = -f 2)

# The active-oem-OEMID file gets created by the update-engine postinst action if both old and new /usr partitions have a sysext
if [ "${OEMID}" != "" ] && [ -e "/sysroot/oem/sysext/active-oem-${OEMID}" ]; then
  INITIAL_MVP="/oem/sysext/oem-${OEMID}-initial.raw"
  SYSEXT_OEM_PART="/oem/sysext/oem-${OEMID}-${VERSION}.raw"
  SYSEXT_ROOT_PART="/etc/flatcar/oem-sysext/oem-${OEMID}-${VERSION}.raw"
  SYMLINK="/sysroot/etc/extensions/oem-${OEMID}.raw"
  ACTIVE_OEM=""

  if [ -e "/sysroot/${SYSEXT_OEM_PART}" ]; then
    ACTIVE_OEM="${SYSEXT_OEM_PART}"
  elif [ -e "/sysroot/${SYSEXT_ROOT_PART}" ]; then
    if [ -L "${SYMLINK}" ]; then
      # Move the inactive sysext to the root partition to free space on the OEM partition
      PREV_SYSEXT="/"$(realpath -m --relative-base=/sysroot "${SYMLINK}" | sed 's#^/##')
      echo "Found ${PREV_SYSEXT} for possible move" >&2
      if [ "${PREV_SYSEXT}" != "" ] && [ -e "/sysroot/${PREV_SYSEXT}" ] && [[ "${PREV_SYSEXT}" != "/etc/flatcar/oem-sysext/"* ]]; then
        mkdir -p /sysroot/etc/flatcar/oem-sysext/
        echo "Moving ${PREV_SYSEXT}"
        # If it was an unexpected symlink target that can't be moved, go on
        mv "/sysroot/${PREV_SYSEXT}" /sysroot/etc/flatcar/oem-sysext/ || true
      fi
    fi
    # Try to store the active sysext in the OEM partition if there is enough space, this helps to support clearing the root partition
    mkdir -p /sysroot/oem/sysext/
    echo "Trying to move ${SYSEXT_ROOT_PART} to OEM partition" >&2
    if mv "/sysroot/${SYSEXT_ROOT_PART}" /sysroot/oem/sysext/; then
      ACTIVE_OEM="${SYSEXT_OEM_PART}"
    else
      echo "That failed, keeping it on root partition" >&2
      ACTIVE_OEM="${SYSEXT_ROOT_PART}"
    fi
  elif [ -e "/sysroot/${INITIAL_MVP}" ]; then
    # This is the initial MVP OEM sysext that is not bound to the OS version because
    # at that time update support was missing.
    # Like any other inactive sysext, it will be deleted by update-engine's post-inst action
    # when it's not needed (i.e., the active and new inactive both have a versioned sysext)
    ACTIVE_OEM="${INITIAL_MVP}"
  else
    echo "Did not find ${SYSEXT_OEM_PART} nor ${SYSEXT_ROOT_PART}, downloading" >&2
    systemctl start --quiet systemd-networkd systemd-resolved
    download_and_verify "oem-${OEMID}.raw"
    mkdir -p /run/_oem
    mount "/sysroot/oem-${OEMID}.raw" /run/_oem/
    if grep -q SYSEXT_LEVEL=1.0 "/run/_oem/usr/lib/extension-release.d/extension-release.oem-${OEMID}" ; then
      # The initial MVP OEM is only supported on the OEM partition
      ACTIVE_OEM="${INITIAL_MVP}"
    fi
    umount "/sysroot/oem-${OEMID}.raw"
    mkdir -p /sysroot/oem/sysext/
    if [ "${ACTIVE_OEM}" != "" ]; then
      mv "/sysroot/oem-${OEMID}.raw" "/sysroot/${ACTIVE_OEM}"
    else
      echo "Trying to place /sysroot/oem-${OEMID}.raw on OEM partition" >&2
      if mv "/sysroot/oem-${OEMID}.raw" /sysroot/oem/sysext/; then
        ACTIVE_OEM="${SYSEXT_OEM_PART}"
      else
        echo "That failed, moving it to right location on root partition" >&2
        mkdir -p /sysroot/etc/flatcar/oem-sysext/
        mv "/sysroot/oem-${OEMID}.raw" /sysroot/etc/flatcar/oem-sysext/
        ACTIVE_OEM="${SYSEXT_ROOT_PART}"
      fi
    fi
  fi
  if [ "${ACTIVE_OEM}" != "" ] && [ -e "/sysroot/${ACTIVE_OEM}" ]; then
    mkdir -p "/sysroot/etc/extensions"
    ln -fs "${ACTIVE_OEM}" "${SYMLINK}"
  else
    rm -f "${SYMLINK}"
  fi

  # Flag file created by the update-engine postinst action if both /usr partitions have a sysext and active-oem-OEMID didn't exist
  if [ -e "/sysroot/oem/sysext/migrate-oem-${OEMID}" ]; then
    echo "Found migration flag, deleting known old OEM partition files" >&2
    # For each OEMID, delete known old files under /oem/ and /etc/ based on the contents of the flag file
    # (The list is maintained in the update-engine post-inst action)
    while IFS="" read -r entry; do
      rm -f "${entry}" || true
    done < "/sysroot/oem/sysext/migrate-oem-${OEMID}"
    rm -f "/sysroot/oem/sysext/migrate-oem-${OEMID}"
  fi
fi

# Manage optional Flatcar extensions that are coupled to the OS version.
# They are only stored on the root partition but not directly in /etc/extensions/ because there
# can only be one file for the extension name (this could be covered by the ".v directory" proposal).
# The enabled-sysext.conf file contains the names per line and supports comments,
# update-engine uses this file to know which extensions to download.
for NAME in $(grep -o '^[^#]*' /sysroot/etc/flatcar/enabled-sysext.conf || true); do
  ACTIVE_EXT="/etc/flatcar/sysext/flatcar-${NAME}-${VERSION}.raw"
  if [ ! -e "/sysroot/${ACTIVE_EXT}" ]; then
    echo "Did not find ${ACTIVE_EXT}" >&2
    download_and_verify "flatcar-${NAME}.raw"
    mv "/sysroot/flatcar-${NAME}.raw" "/sysroot/${ACTIVE_EXT}"
  fi
  if [ -e "/sysroot/${ACTIVE_EXT}" ]; then
    mkdir -p "/sysroot/etc/extensions"
    ln -fs "${ACTIVE_EXT}" "/sysroot/etc/extensions/flatcar-${NAME}.raw"
  else
    rm -f "/sysroot/etc/extensions/flatcar-${NAME}.raw"
  fi
done
